#1) How-to-count-distance-to-the-previous-zero For each value, count the difference of the distance from the previous zero
#(or the start of the Series, whichever is closer) and if there are no previous zeros,print the position Consider a DataFrame 
#df where there is an integer column {'X':[7, 2, 0, 3, 4, 2, 5, 0, 3, 4]} The values should therefore
#be [1, 2, 0, 1, 2, 3, 4, 0, 1, 2]. Make this a new column 'Y'.
#import pandas as pd
#df = pd.DataFrame({'X': [7, 2, 0, 3, 4, 2, 5, 0, 3, 4]})

import pandas as pd
s = pd.Series([7, 2, 0, 3, 4, 2, 5, 0, 3, 4])
(s.groupby(s.eq(0).cumsum().mask(s.eq(0))).cumcount() + 1).mask(s.eq(0), 0).tolist()

#OUTPUT:
[1, 2, 0, 1, 2, 3, 4, 0, 1, 2]

#2) Create a DatetimeIndex that contains each business day of 2015 and use it to index a
#Series of random numbers.

import pandas as pd
dti = pd.date_range(start='2015-01-01', end='2015-12-31', freq='c') 
s = pd.Series(np.random.rand(len(dti)), index=dti)
print (s)
#Output
2015-01-01    0.704938
2015-01-02    0.441802
2015-01-05    0.768811
2015-01-06    0.025374
2015-01-07    0.191641
2015-01-08    0.987131
2015-01-09    0.922559
2015-01-12    0.404582
2015-01-13    0.913827
2015-01-14    0.079721
2015-01-15    0.818774
2015-01-16    0.940532
2015-01-19    0.804047
2015-01-20    0.091029
2015-01-21    0.071156
2015-01-22    0.289764
2015-01-23    0.857142
2015-01-26    0.482889
2015-01-27    0.265929
2015-01-28    0.719053
2015-01-29    0.092989
2015-01-30    0.806180
2015-02-02    0.134520
2015-02-03    0.569498
2015-02-04    0.062160
2015-02-05    0.030293
2015-02-06    0.618117
2015-02-09    0.902410
2015-02-10    0.290413
2015-02-11    0.940487
                ...   
2015-11-20    0.831554
2015-11-23    0.424375
2015-11-24    0.420218
2015-11-25    0.834498
2015-11-26    0.081863
2015-11-27    0.088066
2015-11-30    0.720725
2015-12-01    0.359997
2015-12-02    0.770534
2015-12-03    0.339227
2015-12-04    0.714055
2015-12-07    0.069276
2015-12-08    0.977774
2015-12-09    0.209790
2015-12-10    0.070376
2015-12-11    0.452977
2015-12-14    0.570692
2015-12-15    0.473841
2015-12-16    0.457789
2015-12-17    0.982042
2015-12-18    0.217169
2015-12-21    0.804793
2015-12-22    0.960368
2015-12-23    0.828373
2015-12-24    0.803523
2015-12-25    0.553272
2015-12-28    0.978448
2015-12-29    0.604734
2015-12-30    0.244861
2015-12-31    0.031083
Freq: C, Length: 261, dtype: float64



#3) Find the sum of the values in s for every Wednesday
import pandas as pd
dti = pd.date_range(start='2015-01-01', end='2015-12-31', freq='c') 
s = pd.Series(np.random.rand(len(dti)), index=dti)
s[dti.weekday == 2].sum()

#OUTPUT

Out[31]:
25.164089791305205

#4) Average For each calendar month
import pandas as pd
dti = pd.date_range(start='2015-01-01', end='2015-12-31', freq='c') 
s = pd.Series(np.random.rand(len(dti)), index=dti)
s.resample('M').mean()

#OUTPUT

Out[35]:
2015-01-31    0.496694
2015-02-28    0.431162
2015-03-31    0.451061
2015-04-30    0.510414
2015-05-31    0.528275
2015-06-30    0.534308
2015-07-31    0.593215
2015-08-31    0.517765
2015-09-30    0.442213
2015-10-31    0.518978
2015-11-30    0.412300
2015-12-31    0.498124
Freq: M, dtype: float64

#5) For each group of four consecutive calendar months in s, find the date on which the highest value occurred.
import pandas as pd
dti = pd.date_range(start='2015-01-01', end='2015-12-31', freq='c') 
s = pd.Series(np.random.rand(len(dti)), index=dti)
s.groupby(pd.TimeGrouper('4M')).idxmax()

#OUTPUT
2015-01-31   2015-01-08
2015-05-31   2015-02-25
2015-09-30   2015-08-20
2016-01-31   2015-11-24
dtype: datetime64[ns]
